#!/bin/bash
set -e
set -o pipefail

fatal() {
    echo "$*" >&2
    exit 1
}

invokedpwd=$(pwd)
[ -n "$PWMRC" ] || PWMRC=~/.pwmrc
if [ -f "$PWMRC" ]; then
    [ $(stat -c'%a' "$PWMRC") = 600 ] || fatal "Access mode on \`$PWMRC' is too permissive: please set to 600."
    . "$PWMRC"
fi
[ -n "$dbdir" ] || dbdir=~/.pwmdb
[ -n "$default_pwlen" ] || default_pwlen=30
[ -n "$EDITOR" ] || EDITOR=vi
if [ -z "$PWMTMP" ] ; then
    if { mount -t tmpfs | grep ' /run/user ' > /dev/null ; } ; then
        if [ -n "$UID" -a -d /run/user/$UID ] ; then
            PWMTMP=/run/user/$UID
        fi
    fi
fi
if [ -z "$PWMTMP" ] ; then
    PWMTMP=$HOME
fi
[ -n "$GPG_RECIPIENT" ] || GPG_RECIPIENT=""
if [ -z "$GPG_RECIPIENT" ] ; then
    GPG_RECIPIENT_OPTION=""
else
    GPG_RECIPIENT_OPTION="--recipient=$GPG_RECIPIENT"
fi
# this has to be set before we create the history file
umask 177

if [ "$SHELL" = "$BASH" ]; then
    readline_flags="-e"
    [ -n "$history_file" ] || history_file=~/.pwm_history
    [ -f "$history_file" ] || touch "$history_file"
    history -r "$history_file"
fi

if [ -d "$dbdir" ]; then
    [ $(stat -c'%a' "$dbdir") = 700 ] || fatal "Access mode on password database \`$dbdir' is too permissive: please set to 700."
    cd "$dbdir"
fi

type gpg 2>/dev/null >&2 || fatal "GPG is required to use Password Manager."

at_exit() {
    rm $PIDFILE
}

PIDFILE=$dbdir/pwm.pid
echo $$ > $PIDFILE

trap at_exit EXIT

backup_db() {
    if [ -d "$dbdir" ]; then
        if [ -d "${dbdir}~" ] ; then
            rm -rf "${dbdir}~"
        fi
        mkdir -m 700 "${dbdir}~"
        cp --preserve ${dbdir}/* ${dbdir}~/
    fi
}

restore_db() {
    if [ -d "${dbdir}~" ] ; then
        cp -v --preserve ${dbdir}~/* ${dbdir}/
    else
        echo "Backup directory ${dbdir}~ not found. Bailing out."
        exit 1
    fi
}

backup_key() {
    if [ -f "${dbdir}/${key}" ]; then
        cp --preserve "${dbdir}/${key}" "${dbdir}/${key}~"
    fi
}

encrypt() {
    gpg --encrypt $GPG_RECIPIENT_OPTION --yes --output "${dbdir}/${key}"
}

decrypt() {
    if [ -f "${dbdir}/${key}" ]; then
        < "${dbdir}/${key}" gpg --decrypt --quiet --batch
    else
        echo -n ""
    fi
}

# only creates an empty directory actually
create_db() {
    if [ ! -d "$dbdir" ] ; then
        echo "About to create new password database: \`$dbdir'..."
        mkdir -m 700 "$dbdir"
        cd "$dbdir"
    fi
}

with_tempfile() {
    tmp=$(tempfile -p .pwm -d "$PWMTMP")
    old_at_exit="$at_exit"
    rm_tempfile_cmd="rm -f -- '$tmp'"
    at_exit="$rm_tempfile_cmd; $old_at_exit"
    trap "$at_exit" EXIT
    eval $*
    eval $rm_tempfile_cmd
    at_exit="$old_at_exit"
    trap "$at_exit" EXIT
    tmp=''
}

read_key() {
    read $readline_flags -p "$*: " key
    [ -n "$history_file" ] && history -s "$key" && history -w "$history_file"
    true
}

lookup() {
    if decrypted=$(decrypt) ; then
        echo "$decrypted" | less
        unset decrypted
    else
        echo 'decryption failed'
    fi
}

store_password() {
    backup_key
    if { echo -n "$pw" | encrypt ; } then
        echo "stored"
    else
        echo "storage failed"
    fi
}

edit_key() {
    if [ -z "$tmp" ]; then
        with_tempfile edit_key
    else
        backup_key
        if decrypt >"$tmp"; then
            "$EDITOR" "$tmp"
            # TODO: check if file was modified actually. mtime?
            encrypt <"$tmp"
            echo "$key updated"
        fi
    fi
}

change_masterpw() {
    backup_db
    for FILE in $(find "$dbdir" -maxdepth 1 -type f) ; do
        key=$(basename "$FILE")
        if ! change_keypw ; then
            echo "An error occurred while changing password on key ${key}. Restoring original files..."
            restore_db
            break
        fi
    done
}

encrypt_db() {
    #Encrypt all files in the current directory, which presumably are unencrypted.
    #Files will be written to a subdirectory "pwmdb".
    cd "$invokedpwd"
    pwd
    old_dbdir=${dbdir}
    dbdir="pwmdb"
    mkdir -p -m 700 ${dbdir}
    for FILE in $(find . -maxdepth 1 -type f) ; do
        key=$(basename "$FILE")
        echo "$key"
        if ! { encrypt < "$key" ; } then
            echo "An error occurred while encrypting ${key}."
            break
        fi
    done
    dbdir=${old_dbdir}
    cd "${dbdir}"
}

change_keypw() {
    if [ -z "$tmp" ]; then
        with_tempfile change_keypw
    else
        decrypt >"$tmp"
        encrypt <"$tmp"
    fi
}

have_xclip() {
    type xclip 2>/dev/null >&2
}

soak_xclip() {
    xclip -in -selection clipboard -l 0
}

echo "Password Manager v0.1"
[ -d "$dbdir" ] && echo "Database file is: $dbdir"
[ -f "$history_file" ] && echo "Key history file is: $history_file"
echo
print_help() {
    echo "l) Lookup password"
    have_xclip && echo "x) Copy password to X clipboard (using xclip command)"
    echo "s) Store password"
    if have_xclip; then
        echo "g[sx]) Generate password (also store and/or copy to X clipboard)"
    else
        echo "g[s]) Generate password (also store in the database)"
    fi
    echo "e) Edit entry"
    echo "h) Print this help message"
    echo "q) Quit"
}
print_help
while true; do
    read -p "> " action
    case "$action" in
        l)
            if [ ! -d "$dbdir" ]; then
                echo "Password database doesn't exist yet: \`$dbdir'"
                continue
            fi
            read_key "lookup key"
            if [ ! -f ${dbdir}/${key} ] ; then
                echo "key $key does not exist."
            else
                lookup || echo "lookup failed"
            fi
            ;;
        x)
            if [ ! -d "$dbdir" ]; then
                echo "Password database doesn't exist yet: \`$dbdir'"
                continue
            fi
            read_key "key to copy"
            pw=$(lookup || true)
            if [ -z "$pw" ]; then
                echo "not found"
            else
                echo "$pw" | soak_xclip
                echo "soaked password for paste from X clipboard"
            fi
            ;;
        s)
            [ -d "$dbdir" ] || create_db || continue
            read_key "key to store"
            stty -echo
            read -p "password to store: " pw; echo
            stty echo
            store_password
            unset pw
            ;;
        g|gs|gx|gsx)
            read -p "password length ($default_pwlen): " pwlen
            [ "$pwlen" = "$(echo)" ] && pwlen="$default_pwlen"
            pw=$(openssl rand -base64 "$pwlen" | tr -d '\n=' | cut -b-"$pwlen")
            if [ "$action" = g ]; then
                echo "$pw"
            else
                if [ "$action" = gs -o "$action" = gsx ]; then
                    [ -d "$dbdir" ] || create_db || continue
                    read_key "key to store"
                    store_password
                fi
                if [ "$action" = gx -o "$action" = gsx ]; then
                    echo -n "$pw" | soak_xclip
                fi
            fi
            ;;
        e)
            if [ -d "$dbdir" ]; then
                read_key "key to edit"
            else
                create_db || continue
            fi
            edit_key
            ;;
        h) print_help
           ;;
        encryptdb)
           encrypt_db
           ;;
        q)
            echo "Bye!"
            break
            ;;
        *) echo "unknown action: 'h' for help";;
    esac
done

exit 0
